

class sudoku {
    public static void main() {
        int board[][] = new int[9][9];
        fillGrid(board);
        if(isValid(board))  {
            solve(board);
        }
    }
    public int fillGrid(int[][] board)  {
        Random rand = new Random();
        for(int i = 0;i < 9;i++) {
            for(int j = 0;j < <9;j++) {
                board[i][j] = 0;
            }
        } 
        for(int k = 0;k < 17;k++) {
            int row, col, num;
            do {
                row = rand.nextInt(9);
                col = rand.nextInt(9);
                num = rand.nextInt(9) + 1;
            } while(!isValid(board, row, col, num));
            board[row][col] = num;    
        }
    public boolean isValid(int[][] board, int row, int col, int num) {
        HashSet<Integer> setRow = new HashSet<>();
        HashSet<Integer> setCol = new HashSet<>();
        for(int i = 0;i < 9;i++) {
            for(int j = 0;j < 9;j++) {
                if(board[i][j] != 0) {
                    if(!setRow.contains(board[i][j])) {
                        setRow.add(board[i][j]);
                    } else {
                        return false;
                    }
                }
                else if(board[j][i] != 0) {
                    if(!setCol.contains(board[j][i])) {  
                        setCol.add(board[j][i]);
                    }
                    else {
                        return false;
                    }
                }
                //NEEDS TO VALIDATE A SUBGRID
                }
            }
        }
    }
    public int solve(int[][] board)  {
        for(int i = 0;i < 9;i++) {
            for(int j = 0;j < 9;j++) {
                while(board[i][j] == 0) {
                    for(int k = 0;k < 9;k++) {

                    }
                }

            }
        }
    }
}
//TODO
//find out how to validate a subgrid
//implement backtracking
